{
  "hash": "4f4b443bdf443c3558cf74a7f743ab9a",
  "result": {
    "markdown": "---\ntitle: \"Importando e exportando tabelas do R para o Excel através da área de transferência\"\ndate: \"2021-12-27\"\ntags: [\"tutoriais\"]\ncategories: [\"tutoriais\"]\nimage: \"clipr.webp\"\nauthor: [\"Tereza\"]\ndescription: \"Aprenda a importar/exportar tabelas do R através do pacote clipr\"\ndraft: false\n---\n\n\nO `clipr` é um pacote composto por algumas funções que permitem importar/exportar objetos do R através da área de transferência!\n\nEssas funções são muito úteis para, por exemplo, copiar objetos do excel, powerpoint ou word para o R, e vice-versa.\n\nNesse post, vamos mostrar **como copiar tabelas do R para o Excel**, e **como copiar tabelas do Excel para o R** através desse pacote! Sem mais delongas, vamos aos tutoriais:\n\n## Copiando tabelas do R para o Excel através da área de transferência\n\n1. Carregue o pacote `clipr`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(clipr)\n```\n:::\n\n\n\n\n\n2. Agora, basta usar a tabela escolhida como argumento da função `write_clip`. No nosso caso, queremos copiar a tabela `mtcars`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_clip(mtcars)\n```\n:::\n\n\n3. Abra um novo arquivo excel, use o atalho **crtl + v** e voilà!\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](clipr1.webp){fig-align='center'}\n:::\n:::\n\n\nNote que por default, o separador decimal usado é o ponto. Para mudar isso, basta usar o argumento `dec = \",\"`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_clip(mtcars, dec = \",\")\n```\n:::\n\n\nUsando o atalho **ctrl + v** no arquivo excel:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](clipr2.webp){fig-align='center'}\n:::\n:::\n\n\nTambém podemos usar o operador **pipe**, obtendo o mesmo resultado do passo anterior:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  write_clip(dec = \",\")\n```\n:::\n\n\nAlém disso, a função também pode receber outros argumentos. Por exemplo, com o argumento `col.names = FALSE` a tabela será copiada sem os nomes das colunas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  write_clip(dec = \",\", col.names = FALSE)\n```\n:::\n\n\nUsando o atalho **ctrl + v** no arquivo excel:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](clipr3.webp){fig-align='center'}\n:::\n:::\n\n\n## Copiando tabelas do Excel para o R através da área de transferência\n\n1. Carregue o pacote `clipr`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(clipr)\n```\n:::\n\n\n2. No excel, selecione a tabela desejada, e a copie através do comando **ctrl + c**. No nosso caso, estamos copiando a base `mtcars` (no formato **.xlsx**)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](clipr4.webp){fig-align='center'}\n:::\n:::\n\n\n3. Agora, vá até o R e use o seguinte comando:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_de_dados <- read_clip_tbl()\n```\n:::\n\n\n(`base_de_dados` é apenas um nome genérico que estamos dando para esse **data.frame**, você pode nomear como preferir)\n\nE prontinho! Vamos visualizar o objeto `base_de_dados`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_de_dados[1:11, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n```\n:::\n:::\n\n\nTambém podemos usar alguns argumentos na função `read_clip_tbl`. Por exemplo, considere que temos uma base de dados no formato **.csv**:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](clipr5.webp){fig-align='center'}\n:::\n:::\n\n\nSe quisermos copiar a tabela `mtcars` no formato **.csv** do excel para o R, por exemplo, basta usar o argumento `sep` para especificar o separador usado, que é a vírgula:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_de_dados2 <- read_clip_tbl(sep = \",\")\n```\n:::\n\n\nVamos visualizar o objeto `base_de_dados2`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_de_dados2[1:11, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   X  mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n1          Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n2      Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n3         Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n4     Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n5  Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n6            Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n7         Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n8          Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n9           Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n10          Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n11         Merc 280C 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n```\n:::\n:::\n\n\nObs: Para limpar a area de tranferencia, basta usar o comando `clear_clip()`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}